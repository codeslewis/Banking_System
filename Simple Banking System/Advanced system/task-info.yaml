type: edu
custom_name: stage4
files:
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {
            try {
                Files.deleteIfExists(Paths.get(tempDatabaseFileName));
                Files.deleteIfExists(Paths.get(databaseFileName));
            } catch (Exception ignored) {
            }

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        //@BeforeClass
        public static void createTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        //@AfterClass
        public static void deleteTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/entities/Account.java
  visible: true
  text: |
    package banking.entities;

    import banking.utils.LuhnCalculator;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.stream.Collectors;

    public class Account {
        private static final String INN = "400000";
        private String cardNumber;
        private String pin;

        private int balance;

        public Account(String cardNumber, String pin, int balance) {
            this.cardNumber = cardNumber;
            this.pin = pin;
            this.balance = balance;
        }

        private Account() {}

        public static Account generateNewAccount() {
            Account result = new Account();
            result.cardNumber = generateCardNumber();
            result.pin = generatePin();
            return result;
        }

        private static String generatePin() {
            return new Random()
                    .ints(4, 0, 9)
                    .mapToObj(String::valueOf)
                    .collect(Collectors.joining());
        }

        private static String generateCardNumber() {
            int[] digits = new Random()
                    .ints(9,0,9)
                    .toArray();
            int checkDigit = LuhnCalculator.getCheckSum(INN, digits);
            return INN + Arrays.stream(digits)
                    .mapToObj(String::valueOf)
                    .collect(Collectors.joining()) +
                    checkDigit;
        }


        public String getCardNumber() {
            return cardNumber;
        }

        public String getPin() {
            return pin;
        }

        public int getBalance() {
            return balance;
        }

        public void printDetails() {
            System.out.println("Your card number:");
            System.out.println(getCardNumber());
            System.out.println("Your card PIN:");
            System.out.println(getPin());
            System.out.println();
        }

    }
  learner_created: true
- name: src/banking/ui/MainMenu.java
  visible: true
  text: |
    package banking.ui;

    import java.util.EnumSet;

    public enum MainMenu {
        EXIT("0. Exit"),
        NEW("1. Create an account"),
        LOGIN("2. Log into account");

        private final String menuDefinition;

        MainMenu(String menuDefinition) {
            this.menuDefinition = menuDefinition;
        }

        public String getMenuDefinition() {
            return menuDefinition;
        }

        public static void printMenu() {
            EnumSet.allOf(MainMenu.class)
                    .forEach(item -> System.out.println(item.getMenuDefinition()));
        }


    }
  learner_created: true
- name: src/banking/utils/LuhnCalculator.java
  visible: true
  text: |
    package banking.utils;

    import java.util.Arrays;

    public class LuhnCalculator {

        private static int calculateControlNumber(int[] numbers) {
            int[] calculations = new int[numbers.length];

            for (int i = numbers.length - 1; i >= 0; i-=2) {
                if (numbers[i] * 2 > 9) {
                    calculations[i] = numbers[i] * 2 - 9;
                } else {
                    calculations[i] = numbers[i] * 2;
                }
            }

            for (int i = numbers.length - 2; i >= 0; i-=2) {
                calculations[i] = numbers[i];
            }

            return Arrays.stream(calculations).sum();
        }

        private static int calculateCheckSum(int control) {
            return control % 10 == 0 ? 0 : 10 - control % 10;
        }

        public static int getCheckSum(String inn, int[] accNum) {
            int[] concatNum = new int[accNum.length + 6];

            int[] innArr =
                    Arrays.stream(inn.split(""))
                        .mapToInt(Integer::parseInt)
                        .toArray();

            System.arraycopy(innArr, 0, concatNum, 0, 5);
            System.arraycopy(accNum, 0, concatNum, 6, 9);

            return calculateCheckSum(calculateControlNumber(concatNum));
        }

        public static boolean validateCheckSum(int[] cardNumber) {
            int[] numberMinusLast = new int[cardNumber.length - 1];
            System.arraycopy(cardNumber, 0,numberMinusLast, 0, cardNumber.length - 1);
            return cardNumber[15] == calculateCheckSum(calculateControlNumber(numberMinusLast));
        }
    }
  learner_created: true
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    import java.util.Map;
    import java.util.Scanner;

    public class Main {
        public static String url;

        public static void main(String[] args) {
            String fileName = "";
            for (int i = 0; i < args.length; i++) {
                if (i % 2 == 0 && args[i].equals("-fileName")) {
                    fileName = args[i + 1];
                    break;
                }
            }
            url = "jdbc:sqlite:card.s3db"; // + fileName;
            CardDAO.configure();
            start();
        }

        static void start() {
            try (Scanner scanner = new Scanner(System.in)) {
                while (true) {
                    Map<String, Card> cards = CardDAO.getCardMap();
                    System.out.println("1. Create an account\n" +
                            "2. Log into account\n" +
                            "0. Exit");
                    switch (scanner.nextInt()) {
                        case 1:
                            while (true) {
                                Card card = new Card();
                                if (cards.containsKey(card.getCardNumber())) {
                                    continue;
                                }
                                CardDAO.save(card);
                                System.out.println("Your card has been created");
                                System.out.println("Your card number:");
                                System.out.println(card.getCardNumber());
                                System.out.println("Your card PIN:");
                                System.out.println(card.getPIN());
                                break;
                            }
                            break;
                        case 2:
                            System.out.println("Enter your card number:");
                            String cardNumber = scanner.next();
                            System.out.println("Enter your PIN:");
                            int pin = scanner.nextInt();
                            if (cards.containsKey(cardNumber)) {
                                if (cards.get(cardNumber).getPIN() == pin) {
                                    logged(cards.get(cardNumber));
                                } else {
                                    System.out.println("Wrong card number or PIN!");
                                }
                            } else {
                                System.out.println("Wrong card number or PIN!");
                            }
                            break;
                        case 0:
                            System.out.println("Bye!");
                            System.exit(0);

                    }
                }
            }
        }

        private static void logged(Card card) {
            System.out.println("You have successfully logged in!");
            try (Scanner scanner = new Scanner(System.in)) {
                System.out.println("1. Balance\n" +
                        "2. Log out\n" +
                        "0. Exit");
                int choice = -1;
                while (choice != 2) {
                    choice = scanner.nextInt();
                    switch (choice) {
                        case 1:
                            System.out.println("Balance: " + card.getBalance());
                            break;
                        case 2:
                            System.out.println("You have successfully logged out!");
                            break;
                        case 0:
                            System.out.println("Bye!");
                            System.exit(0);
                    }
                }
            }
        }
    }
  learner_created: false
- name: src/banking/repository/AccountRepository.java
  visible: true
  text: "package banking.repository;\n\nimport banking.entities.Account;\nimport org.sqlite.SQLiteDataSource;\n\
    \nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\
    import java.util.Optional;\n\npublic class AccountRepository {\n    private static\
    \ AccountRepository instance;\n\n    private static final String dbFileName =\
    \ \"card.s3db\";\n\n    private static final String CREATE = \"CREATE TABLE IF\
    \ NOT EXISTS card (\\n\"\n            + \"\tid integer PRIMARY KEY,\\n\"\n   \
    \         + \"\tnumber text NOT NULL,\\n\"\n            + \"\tpin text NOT NULL,\\\
    n\"\n            + \" balance integer\\n\"\n            + \");\";\n\n    private\
    \ final SQLiteDataSource dataSource;\n\n\n    public static AccountRepository\
    \ getInstance() {\n        if (instance == null) {\n            synchronized (AccountRepository.class)\
    \ {\n                if (instance == null) {\n                    instance = new\
    \ AccountRepository();\n                }\n            }\n        }\n        return\
    \ instance;\n    }\n\n    private AccountRepository() {\n        if (instance\
    \ != null) {\n            throw new RuntimeException(\"use getInstance() method\
    \ to create\");\n        }\n        this.dataSource = new SQLiteDataSource();\n\
    \        this.dataSource.setUrl(\"jdbc:sqlite:\" + dbFileName);\n        createTable();\n\
    \    }\n\n    private void createTable() {\n        try (Statement statement =\
    \ this.dataSource.getConnection().createStatement()) {\n            statement.executeUpdate(CREATE);\n\
    \n        } catch (SQLException e) {\n            e.printStackTrace();\n     \
    \   }\n    }\n\n\n    public Account createAccount() {\n        Account generatedAccount\
    \ = Account.generateNewAccount();\n        String sql = \"INSERT INTO card(number,\
    \ pin, balance) VALUES \" +\n                String.format(\"('%s', '%s', %d)\"\
    ,\n                generatedAccount.getCardNumber(),\n                generatedAccount.getPin(),\n\
    \                generatedAccount.getBalance());\n\n        try (Statement statement\
    \ = this.dataSource.getConnection().createStatement()) {\n            statement.executeUpdate(sql);\n\
    \            System.out.println(\"\\nYour card has been created\");\n        \
    \    generatedAccount.printDetails();\n        } catch (SQLException e) {\n  \
    \          e.printStackTrace();\n        }\n        return generatedAccount;\n\
    \    }\n\n    public Optional<Account> readOne(String cardNumberInput, String\
    \ pinInput) {\n        String sql = \"SELECT * FROM card WHERE \" +\n        \
    \        String.format(\"number = %s AND pin = %s\", cardNumberInput, pinInput);\n\
    \n        try (Statement statement = this.dataSource.getConnection().createStatement();\n\
    \             ResultSet resultSet = statement.executeQuery(sql)) {\n         \
    \   String number = resultSet.getString(\"number\");\n            String pin =\
    \ resultSet.getString(\"pin\");\n            int balance = resultSet.getInt(\"\
    balance\");\n\n            return Optional.of(new Account(number, pin, balance));\n\
    \        } catch (SQLException e) {\n            e.printStackTrace();\n      \
    \  }\n        return Optional.empty();\n    }\n\n}\n"
  learner_created: true
- name: src/banking/ui/Menu.java
  visible: true
  text: |
    package banking.ui;

    import banking.entities.Account;
    import banking.repository.AccountRepository;
    import banking.service.AccountService;

    import java.util.Optional;
    import java.util.Scanner;

    public class Menu {
        private static final Scanner stdin = new Scanner(System.in);

        private final AccountRepository repository;
        private final AccountService service;

        public Menu() {
            this.service = new AccountService();
            this.repository = AccountRepository.getInstance();
        }

        public void mainMenu() {
            MainMenu choice;
            while(true) {
                try {
                    MainMenu.printMenu();
                    choice = MainMenu.values()[Integer.parseInt(stdin.nextLine())];
                    switch (choice) {
                        case NEW:
    //                        repository.createAccount();
                            service.newAccount();
                            break;
                        case LOGIN:
                            Optional<Account> current = attemptLogin();
                            if (current.isPresent()) {
                                System.out.println("\nYou have successfully logged in!\n");
                                accountMenu(current.get());
                            } else {
                                System.out.println("\nWrong card number or PIN!\n");
                            }
                            break;
                        case EXIT:
                            System.out.println("Bye!");
                            return;
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("Inappropriate input");
                }
            }
        }

        public void accountMenu(Account account) {
            AccountMenu choice;
            while(true) {
                try {
                    AccountMenu.printMenu();
                    choice = AccountMenu.values()[Integer.parseInt(stdin.nextLine())];
                    switch (choice) {
                        case BALANCE:
                            System.out.println("Balance: " + account.getBalance());;
                            break;
                        case LOGOUT:
                            System.out.println("You have successfully logged out");
                            return;
                        case EXIT:
                            System.out.println("Bye!");
                            System.exit(0);
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("Inappropriate input");
                }
            }
        }

        private Optional<Account> attemptLogin() {
            System.out.println("\nEnter your card number:");
            System.out.print(">");
            String cardNumber = stdin.nextLine();
            System.out.println("Enter your PIN:");
            System.out.print(">");
            String pinNumber = stdin.nextLine();
            return repository.readOne(cardNumber, pinNumber);
    //        return service.findAccount(cardNumber, pinNumber);
        }
    }
  learner_created: true
- name: src/banking/ui/AccountMenu.java
  visible: true
  text: |
    package banking.ui;

    import java.util.EnumSet;

    public enum AccountMenu {
        EXIT("0. Exit"),
        BALANCE("1. Balance"),
        LOGOUT("2. Log out");

        private final String menuDefinition;

        AccountMenu(String menuDefinition) {
            this.menuDefinition = menuDefinition;
        }

        public String getMenuDefinition() {
            return menuDefinition;
        }

        public static void printMenu() {
            EnumSet.allOf(AccountMenu.class)
                    .forEach(item -> System.out.println(item.getMenuDefinition()));
        }
    }
  learner_created: true
- name: src/banking/service/AccountService.java
  visible: true
  text: |
    package banking.service;

    import banking.entities.Account;
    import banking.repository.AccountRepository;

    import java.util.Optional;

    public class AccountService {

        private final AccountRepository repository;

        public AccountService() {
            this.repository = AccountRepository.getInstance();
        }

        public Account newAccount() {
            return repository.createAccount();
        }

        public Optional<Account> findAccount(String cardNumber, String pinNumber) {
            return repository.readOne(cardNumber, pinNumber);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #11

    You should not allow a transfer if there is not enough money in the account to complete it. You should print &#39;Not enough money!&#39;

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Arguments: -fileName card.s3db

    0. Exit
    1. Create an account
    2. Log into account
    &gt; 1

    Your card has been created
    Your card number:
    4000003332607528
    Your card PIN:
    0813

    0. Exit
    1. Create an account
    2. Log into account
    &gt; 1

    Your card has been created
    Your card number:
    4000006282878031
    Your card PIN:
    5088

    0. Exit
    1. Create an account
    2. Log into account
    &gt; 2

    Enter your card number:
    &gt;&gt; 4000006282878031
    Enter your PIN:
    &gt;&gt; 5088

    You have successfully logged in!

    0. Exit
    1. Balance
    2. Add income
    3. Do transfer
    4. Close account
    5. Log out
    &gt; 3
    Transfer
    Enter card number:
    &gt; 2000007269641764
    CHECK SUM: 8
    Probably you made a mistake in the card number. Please try again!
    0. Exit
    1. Balance
    2. Add income
    3. Do transfer
    4. Close account
    5. Log out
    &gt; 3
    Transfer
    Enter card number:
    &gt; 2000007269641768
    CHECK SUM: 8
    Such a card does not exist.
    0. Exit
    1. Balance
    2. Add income
    3. Do transfer
    4. Close account
    5. Log out
    &gt; 3
    Transfer
    Enter card number:
    &gt; 4000003332607528
    CHECK SUM: 8
    Enter how much money you want to transfer:
    &gt; 100000
    Success!
    0. Exit
    1. Balance
    2. Add income
    3. Do transfer
    4. Close account
    5. Log out
  time: Mon, 18 Oct 2021 09:57:44 UTC
record: 4
